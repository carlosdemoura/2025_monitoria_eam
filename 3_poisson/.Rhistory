##Exemplo Regressao Poisson
y   <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
x   <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
plot(x,y)
trn <- list(X=x,Y=y)
modelo <- glm(Y ~ X, family = poisson(link = "log"), data = trn)
lm(Y ~ X, data = trn)
mod.lin=lm(Y ~ X, data = trn)
## Resposta do Modelo para -1 <= x <= 1
dt  <- list( X = seq(-1,1,by=0.1) )
## Resposta do Modelo para -1 <= x <= 1
dt  <- list( X = seq(-1,1,by=0.1) )
dt
## Resposta do Modelo para -1 <= x <= 1
dt  <- list( X = seq(-1,1,by=0.1) )
out <- predict(modelo, newdata = dt, type = "response")
plot(x,y,xlab="x",ylab="y")
lines(dt$X, out)
modelo <- glm(Y ~ X, family = poisson, data = trn)
summary(modelo)
modelo1 <- glm(Y ~ X, family = poisson(link="log"), data = trn)
summary(modelo1)
modelo2 <- glm(Y ~ X, family = poisson, data = trn)
summary(modelo2)
model.matrix(modelo1)
model.matrix(modelo2)
y   <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
x   <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
plot(x,y)
trn <- list(X=x,Y=y)
modelo <- glm(Y ~ X, family = poisson(link="log"), data = trn)
summary(modelo)
## Resposta do Modelo para -1 <= x <= 1
dt  <- list( X = seq(-1,1,by=0.1) )
out <- predict(modelo, newdata = dt, type = "response")
plot(x,y,xlab="x",ylab="y")
lines(dt$X, out)
## ligacao "identity"
modelo <- glm(Y ~ X, family = poisson(link = "identity"), data = trn)
##summary(modelo)
out <- predict(modelo, newdata = dt, type = "response")
lines(dt$X, out, col="blue")
##Exemplo Regressao Poisson
y   <- c(2, 3, 6, 7, 8, 9, 10, 12, 15)
x   <- c(-1, -1, 0, 0, 0, 0, 1, 1, 1)
plot(x,y)
trn <- list(X=x,Y=y)
modelo_log <- glm(Y ~ X, family = poisson(link="log"), data = trn)
summary(modelo_log)
## Resposta do Modelo para -1 <= x <= 1
dt  <- list( X = seq(-1,1,by=0.1) )
out <- predict(modelo_log, newdata = dt, type = "response")
plot(x,y,xlab="x",ylab="y")
lines(dt$X, out)
## ligacao "identity"
modelo_id <- glm(Y ~ X, family = poisson(link = "identity"), data = trn)
##summary(modelo)
out <- predict(modelo_id, newdata = dt, type = "response")
lines(dt$X, out, col="blue")
summary(modelo_id)
## ligacao "sqrt"
modelo_sqrt <- glm(Y ~ X, family = poisson(link = "sqrt"), data = trn)
##summary(modelo)
out <- predict(modelo_sqrt, newdata = dt, type = "response")
summary(modelo_sqrt)
lines(dt$X, out, col="red")
df =
data.frame(
x = c(-1, -1, 0, 0, 0, 0, 1, 1, 1),
y = c(2, 3, 6, 7, 8, 9, 10, 12, 15)
)
mod_log  = glm(y ~ x, family = poisson(link = "log"), data = df)
mod_id   = glm(y ~ x, family = poisson(link = "identity"), data = df)
mod_sqrt = glm(y ~ x, family = poisson(link = "sqrt"), data = df)
novos_dados =
data.frame(
x = seq(-1, 1, by = 0.1)
)
seq(-1, 1, by = 0.1)
novos_dados |>
mutate(
log  = predict(mod_log,  newdata = novos_dados, type = "response"),
id   = predict(mod_id,   newdata = novos_dados, type = "response"),
sqrt = predict(mod_sqrt, newdata = novos_dados, type = "response")
)
library(ggplot2)
library(tidyverse)
novos_dados |>
mutate(
log  = predict(mod_log,  newdata = novos_dados, type = "response"),
id   = predict(mod_id,   newdata = novos_dados, type = "response"),
sqrt = predict(mod_sqrt, newdata = novos_dados, type = "response")
)
novos_dados |>
mutate(
log  = predict(mod_log,  newdata = novos_dados, type = "response"),
id   = predict(mod_id,   newdata = novos_dados, type = "response"),
sqrt = predict(mod_sqrt, newdata = novos_dados, type = "response")
) |>
pivot_longer(
cols = c("log", "id", "sqrt"),
names_to = "link",
values_to = "predicao"
)
novos_dados |>
mutate(
log  = predict(mod_log,  newdata = novos_dados, type = "response"),
id   = predict(mod_id,   newdata = novos_dados, type = "response"),
sqrt = predict(mod_sqrt, newdata = novos_dados, type = "response")
)
novos_dados |>
mutate(
log  = predict(mod_log,  newdata = novos_dados, type = "response"),
id   = predict(mod_id,   newdata = novos_dados, type = "response"),
sqrt = predict(mod_sqrt, newdata = novos_dados, type = "response")
) |>
pivot_longer(
cols = c("log", "id", "sqrt"),
names_to = "link",
values_to = "predicao"
)
novos_dados =
novos_dados |>
mutate(
log  = predict(mod_log,  newdata = novos_dados, type = "response"),
id   = predict(mod_id,   newdata = novos_dados, type = "response"),
sqrt = predict(mod_sqrt, newdata = novos_dados, type = "response")
) |>
pivot_longer(
cols = c("log", "id", "sqrt"),
names_to = "link",
values_to = "predicao"
)
ggplot() +
geom_point(data = df, aes(x = x, y = y), size = 2)
ggplot() +
geom_point(data = df, aes(x = x, y = y), size = 20)
ggplot() +
geom_point(data = df, aes(x = x, y = y), size = 1)
ggplot() +
geom_point(data = df, aes(x = x, y = y), size = 2)
ggplot() +
geom_point(data = df, aes(x = x, y = y), size = 2) +
geom_line(data = novos_dados, aes(x = x, y = predicao, color = link), size = 1)
ggplot() +
geom_point(data = df, aes(x = x, y = y), size = 2) +
geom_line(data = novos_dados, aes(x = x, y = predicao, color = link), size = 1) +
labs(x = "x", y = "y", title = "Regressão de Poisson com Diferentes Ligações") +
theme_minimal()
summary(modelo_log)
set.seed(102910)
n   <- 1000
x   <- runif(n,-1,1)
beta0 <- 1.89
beta1 <- 0.67
nsim  <- 1000	# Numero de replicas
Y     <- c()
betas <- matrix(0,nsim,2)
betas
options(max.print = 20)
betas
set.seed(102910)
n   <- 1000
x   <- runif(n,-1,1)
beta0 <- 1.89
beta1 <- 0.67
nsim  <- 1000	# Numero de replicas
Y     <- c()
betas <- matrix(0,nsim,2)
for(j in 1:nsim){
Y <- rpois(n, exp(beta0 + beta1*x))
trn    <- list(X=x,Y=Y);
modelo <- glm(Y ~ X, family = poisson(link = "log"), data = trn)
betas[j,] <- c(modelo$coef[1], modelo$coef[2])
}
par(mfrow=c(1,2))
hist(betas[,1], main="Beta0")
hist(betas[,2], main="Beta1")
summary(betas[,1])
summary(betas[,2])
shapiro.test(betas[,1])
shapiro.test(betas[,2])
n = 100
beta1 = 1
beta2 = -1
data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
)
df =
data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rpois(n, exp(beta1 * x1 + beta2 * x2))
) |>
as_tibble()
glimpse(df)
glm(y ~ x1+x2, family = poisson(link = "log"), data = df) |> summary()
n = 100
beta1 = 1
beta2 = -1
df =
data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rpois(n, exp(beta1 * x1 + beta2 * x2))
) |>
as_tibble()
glimpse(df)
glm(y ~ x1+x2, family = poisson(link = "log"), data = df) |> summary()
rbinom(n, 2, .5)
rbinom(n, 1, .5)
data.frame(
x1 = rnorm(n),
x2 = rbinom(n, 1, .5)
) |>
mutate(
x2 =
case_when(
x2 == 0 ~ "M",
x2 == 1 ~ "F"
)
)
rbinom(n, 2, .5)
library(tidyverse)
n = 100
beta1 = 1
beta2 = -1
df =
data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rpois(n, exp(beta1 * x1 + beta2 * x2))
) |>
as_tibble()
glm(y ~ x1+x2, family = poisson(link = "log"), data = df) |> summary()
df =
data.frame(
x1 = rnorm(n),
x2 = rnorm(n)
) |>
mutate(
y = rpois(n, exp(14+beta1 * x1 + beta2 * x2))
) |>
as_tibble()
glimpse(df)
glm(y ~ x1+x2, family = poisson(link = "log"), data = df) |> summary()
1.400e+01
##Exemplo Birth data
#seleciona o arquivo "mlg_birth.csv"
dt <- read.table("mlg_birth.csv", header=TRUE, sep=",")
plot(dt$x, dt$y)
##Exemplo Birth data
#seleciona o arquivo "mlg_birth.csv"
dt <- read.table("mlg_birth.csv", header=TRUE, sep=",")
plot(dt$x, dt$y)
glimpse(dt)
plot(dt$x, dt$y)
plot(x=dt$x, y=dt$y)
plot(dt$age, dt$children)
par(mfrow=c(1,1))
plot(dt$age, dt$children)
## Poisson Link: log, identity, sqrt
## Ajusta o modelo Poisson com link log
modelo <- glm(children ~ age, family = poisson(link = "log"), data = dt)
summary(modelo)
nrow(dt)
modelo$deviance
modelo$df.residual
## Poisson Link: log, identity, sqrt
## Ajusta o modelo Poisson com link log
modelo0 <- glm(children ~ 1, family = poisson(link = "log"), data = dt)
summary(modelo)
summary(modelo0)
modelo <- glm(children ~ age, family = poisson(link = "log"), data = dt)
summary(modelo)
modelo$deviance
1-pchisq(modelo$deviance,modelo$df.residual) ## p-value "Deviance"
pchisq(modelo$deviance, modelo$df.residual, lower.tail = F)
dt <- read.table("mlg_birth.csv", header=TRUE, sep=",")
## Poisson Link: log, identity, sqrt
## Ajusta o modelo Poisson com link log
modelo0 <- glm(children ~ 1, family = poisson(link = "log"), data = dt)
summary(modelo0)
modelo <- glm(children ~ age, family = poisson(link = "log"), data = dt)
summary(modelo)
modelo$deviance
1-pchisq(modelo$deviance,modelo$df.residual) ## p-value "Deviance"
#cria possíveis idades para previsão
x <- seq(min(dt$age),max(dt$age),by=0.1)
nd     <- list(age=x)
#grafica as observacoes
plot(dt$age,dt$children,xlab='age',ylab='children')
#adiciona a linha vermelha com o valor predito para cada idade
lines(x,predict(modelo,newdata=nd,type='response'),col='red')
#imprime o deviance e seu respectivo p-valor
c(modelo$deviance, 1-pchisq(modelo$deviance,modelo$df.residual))
## Ajusta e grafica o modelo Poisson com link identidade
modelo <- glm(children ~ -1 + age, family = poisson(link = "identity"), data = dt)
## Ajusta e grafica o modelo Poisson com link identidade
modelo <- glm(children ~ age, family = poisson(link = "identity"), data = dt)
## Ajusta e grafica o modelo Poisson com link identidade
modelo <- glm(children ~ 0 + age, family = poisson(link = "identity"), data = dt)
lines(x,predict(modelo,newdata=nd,type='response'),col='blue')
summary(modelo)
#imprime o deviance e seu respectivo p-valor
c(modelo$deviance, 1-pchisq(modelo$deviance,modelo$df.residual))
## Ajusta e grafica o modelo Poisson com link raiz quadrada
modelo <- glm(children ~ age, family = poisson(link = "sqrt"), data = dt)
lines(x,predict(modelo,newdata=nd,type='response'),col='black')
#imprime o deviance e seu respectivo p-valor
c(modelo$deviance, 1-pchisq(modelo$deviance,modelo$df.residual))
## Ajusta e grafica o modelo de regressao linear
modelo.lm <- lm(children ~ age, data = dt)
lines(x,predict(modelo.lm,newdata=nd,type='response'),col='green')
ggplot(dt, aes(age, children)) +
geom_point()
source("D:/carlos/06_academia/20251/monitoria_eam/2025_monitoria_eam/3_mlg_e_analiseResiduos/aula2_ggplot.R", echo=TRUE)
ggplot(dt, aes(age, children)) +
geom_point(size=2)
ggplot(dt, aes(age, children)) +
geom_point(size=2) +
geom_smooth(method = glm, method.args = list(family = poisson(link="log")))
ggplot(dt, aes(age, children)) +
geom_point(size=2) +
geom_smooth(method = glm, y ~ 0+x, method.args = list(family = poisson(link="log")))
ggplot(dt, aes(age, children)) +
geom_point(size=2) +
geom_smooth(method = glm, y ~ x, method.args = list(family = poisson(link="log")))
ggplot(dt, aes(age, children)) +
geom_point(size=2) +
geom_smooth(method = glm, formula= y ~ x, method.args = list(family = poisson(link="log")))
ggplot(dt, aes(age, children)) +
geom_point(size=2) +
geom_smooth(method = glm, formula = 0+y ~ x, method.args = list(family = poisson(link="log")))
ggplot(dt, aes(age, children)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(dt, aes(x = age, y = children)) +
geom_point(size=2) +
geom_smooth(method = glm, formula = y ~ x, method.args = list(family = poisson(link="log"))) +
geom_smooth(method = "lm")
##Exemplo Diabetes data
#seleciona o arquivo "diabetes.csv"
dt <- read.table("diabetes.csv", header=TRUE, sep=",",stringsAsFactors = TRUE)
dt
head(dt)
View(dt)
## Poisson Link: log
modelo <- glm(deaths ~ offset(log(popn)) + age + gender,
family = poisson, data = dt)
summary(modelo)
option(max.print=50)
options(max.print=50)
summary(modelo)
model.matrix(modelo)
glimpse(dt)
View(model.matrix(modelo))
1-pchisq(modelo$deviance,modelo$df.residual) ## p-value "Deviance"
## Poisson Link: identity
modelo <- glm(deaths ~ offset(log(popn)) + age + gender,
family = poisson(link = "identity"), data = dt)
summary(modelo)
## Poisson Link: identity
modelo <- glm(deaths ~ offset(log(popn)) + age + gender,
family = poisson(link = "identity"), data = dt)
## Poisson Link: identity
modelo <- glm(deaths ~ age + gender,
family = poisson(link = "identity"), data = dt)
## Poisson Link: identity
modelo <- glm(deaths ~ 0+offset(log(popn)) + age + gender,
family = poisson(link = "identity"), data = dt)
## Poisson Link: identity
modelo <- glm(deaths ~ 0+ age + gender,
family = poisson(link = "identity"), data = dt)
## Poisson Link: sqrt
modelo <- glm(deaths ~ offset(log(popn)) + age + gender,
family = poisson(link = "sqrt"), data = dt)
summary(modelo)
dt <- read.table("mlg_birth.csv", header=TRUE, sep=",", stringsAsFactors = TRUE)
names(dt) ## Mostra os nomes das colunas da base de dados
## Ajuste do Modelo
## Poisson Link: log
modelo <- glm(children ~ age, family = poisson(link = "log"), data = dt)
plot(dt$age,dt$children,xlab='age',ylab='children')
x   <- seq(min(dt$age),max(dt$age),by=0.1)
nd  <- list(age=x)
lines(x,predict(modelo,newdata=nd,type='response'),col='red')
R  <- residuals(modelo, type = "deviance")
plot(modelo$fitted.values, R, xlab='fitted', ylab = 'Desvio Residual')
plot(1:length(R), R, xlab='ordem', ylab = 'Desvio Residual')
hist(R)
qqnorm(R); qqline(R);
shapiro.test(R)
plot(modelo$fitted.values, R, xlab='fitted', ylab = 'Desvio Residual')
plot(1:length(R), R, xlab='ordem', ylab = 'Desvio Residual')
hist(R)
qqnorm(R); qqline(R);
shapiro.test(R)
hy    <- 3/2*(modelo$y^(2/3))
hyhat <- 3/2*(modelo$fitted.value^(2/3))
Ra    <- (hy - hyhat)/(modelo$fitted.value^(-1/3)*sqrt(modelo$fitted.value)  )
plot(modelo$fitted.values, Ra, xlab='fitted', ylab = 'Residuo Anscombe')
plot(1:length(Ra), Ra, xlab='ordem', ylab = 'Residuo Anscombe')
hist(Ra)
qqnorm(Ra); qqline(Ra);
shapiro.test(Ra)
fit.model <- modelo	## MUITO IMPORTANTE !!!!
X <- model.matrix(fit.model)
n <- nrow(X)
p <- ncol(X)
w <- fit.model$weights
W <- diag(w)
H <- solve(t(X)%*%W%*%X)
H <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h <- diag(H)
# Desvio Residual - "Ajustado"
td <- resid(fit.model,type="deviance")/sqrt(1-h)
# Simulacao do envelope
m <- 1000
e <- matrix(0,n,m)	# Armazena as simulacoes
m <- 1000
e <- matrix(0,n,m)	# Armazena as simulacoes
for(i in 1:m){
# Gera novas saidas a partir dos valores ajustados (originais)
nresp <- rpois(n, fitted(fit.model))
fit   <- glm(nresp ~ X, poisson(link = "log"))
w     <- fit$weights
W     <- diag(w)
H     <- solve(t(X)%*%W%*%X)
H     <- sqrt(W)%*%X%*%H%*%t(X)%*%sqrt(W)
h     <- diag(H)
e[,i] <- sort( resid(fit,type="deviance")/sqrt(1-h) )
}
e1 <- numeric(n)		# limites inferiores
e2 <- numeric(n)		# limites superiores
for(i in 1:n){
e0    <- sort(e[i,])	# ordena cada percentil
e1[i] <- e0[floor(m*.05)]		# Percentil 5
e2[i] <- e0[floor(m*.95)]		# Percentil 95
}
med   <- apply(e,1,mean)	# Define as medias para cada percentil
faixa <- range(td,e1,e2)	# Define os minimos e maximos
par(pty="s")			# square plotting region
qqnorm(td,xlab="Percentis da N(0,1)",ylab="Componente do Desvio Padronizado",ylim=faixa)
par(new=T)									# Permite inserir novas linhas
qqnorm(e1,xlab="",ylab="",type="l",ylim=faixa,lty=1)		# Limite Inferior
par(new=T)
qqnorm(e2,xlab="",ylab="",type="l",ylim=faixa,lty=1)		# Limite Superior
par(new=T)
qqnorm(med,xlab="",ylab="",type="l",ylim=faixa,lty=2)	# Linha Central
e1 <- numeric(n)		# limites inferiores
e2 <- numeric(n)		# limites superiores
for(i in 1:n){
e0    <- sort(e[i,])	# ordena cada percentil
e1[i] <- e0[floor(m*.025)]		# Percentil 5
e2[i] <- e0[floor(m*.975)]		# Percentil 95
}
med   <- apply(e,1,mean)	# Define as medias para cada percentil
faixa <- range(td,e1,e2)	# Define os minimos e maximos
par(pty="s")			# square plotting region
qqnorm(td,xlab="Percentis da N(0,1)",ylab="Componente do Desvio Padronizado",ylim=faixa)
par(new=T)									# Permite inserir novas linhas
qqnorm(e1,xlab="",ylab="",type="l",ylim=faixa,lty=1)		# Limite Inferior
par(new=T)
qqnorm(e2,xlab="",ylab="",type="l",ylim=faixa,lty=1)		# Limite Superior
par(new=T)
qqnorm(med,xlab="",ylab="",type="l",ylim=faixa,lty=2)	# Linha Central
e1 <- numeric(n)		# limites inferiores
e2 <- numeric(n)		# limites superiores
for(i in 1:n){
e0    <- sort(e[i,])	# ordena cada percentil
e1[i] <- e0[floor(m*.005)]		# Percentil 5
e2[i] <- e0[floor(m*.995)]		# Percentil 95
}
med   <- apply(e,1,mean)	# Define as medias para cada percentil
faixa <- range(td,e1,e2)	# Define os minimos e maximos
par(pty="s")			# square plotting region
qqnorm(td,xlab="Percentis da N(0,1)",ylab="Componente do Desvio Padronizado",ylim=faixa)
par(new=T)									# Permite inserir novas linhas
qqnorm(e1,xlab="",ylab="",type="l",ylim=faixa,lty=1)		# Limite Inferior
par(new=T)
qqnorm(e2,xlab="",ylab="",type="l",ylim=faixa,lty=1)		# Limite Superior
par(new=T)
qqnorm(med,xlab="",ylab="",type="l",ylim=faixa,lty=2)	# Linha Central
